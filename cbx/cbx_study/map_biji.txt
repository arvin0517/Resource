


对JAVA的集合的理解是想对于数组

　　数组是大小固定的，并且同一个数组只能存放类型一样的数据（基本类型/引用类型）

　　JAVA集合可以存储和操作数目不固定的一组数据。

---------------------------------------

所有的JAVA集合都位于 java.util包中！

　　JAVA集合只能存放引用类型的的数据，不能存放基本数据类型.

　　JAVA集合主要分为三种类型：

                       　　Set(集)

                       　　List(列表)

                       　　Map(映射)

　　Collection 接口

　　Collection是最基本的集合接口，声明了适用于JAVA集合（只包括Set和List）的通用方法。

    Set 和List 都继承了Conllection,

    Map没有


-------------------------------------------------------------


Collection接口的方法：

　        　boolean add(Object o)   :向集合中加入一个对象的引用

　        　void clear()            :删除集合中所有的对象，即不再持有这些对象的引用

　　        boolean isEmpty()       :判断集合是否为空

　        　boolean contains(Object o): 判断集合中是否持有特定对象的引用

　　        Iterartor iterator()    : 返回一个Iterator对象，可以用来遍历集合中的元素

        　　boolean remove(Object o):从集合中删除一个对象的引用

        　　int size()              :返回集合中元素的数目

        　　Object[] toArray()      :返回一个数组，该数组中包括集合中的所有元素


    注意：Iterator() 和toArray() 方法都用于集合的所有的元素，前者返回一个Iterator对象，后者返回一个包含集合中所有元素的数组。


       Iterator接口声明了如下方法：

              　　hasNext(): 判断集合中元素是否遍历完毕，如果没有，就返回true

              　　next()   :返回下一个元素

              　　remove() :从集合中删除上一个有next()方法返回的元素。


-----------------------------------------------------------------------



Set(集合)：

　　Set是最简单的一种集合。集合中的对象不按特定的方式排序，并且没有重复对象。

　　Set接口主要实现了两个实现类：

　　      HashSet : HashSet类按照哈希算法来存取集合中的对象，存取速度比较快

　      　TreeSet   : TreeSet类实现了SortedSet接口，能够对集合中的对象进行排序。


Set 的用法：
  
　  　存放的是对象的引用，没有重复对象

  　　Set set=new HashSet();

  　　String s1=new String("hello");

  　　String s2=s1;

  　　String s3=new String("world");

  　　set.add(s1);

  　　set.add(s2);

  　　set.add(s3);

  　　System.out.println(set.size());//打印集合中对象的数目 为 2。


   　 Set 的 add()方法是如何判断对象是否已经存放在集合中？

                　　boolean isExists=false;

                　　Iterator iterator=set.iterator();

                　　while(it.hasNext()){
 
                       　　String oldStr=it.next();

                       　　if(newStr.equals(oldStr)){

                              　　isExists=true;
                　　}
　　}



   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


Set的功能方法:


     　　Set具有与Collection完全一样的接口，因此没有任何额外的功能，不像前面有两个不同的List。

         实际上Set就是Collection,只是行为不同。(这是继承与多态思想的典型应用：表现不同的行为。)

         Set不保存重复的元素(至于如何判断元素相同则较为负责)


      (1)、Set : 存入Set的每个元素都必须是唯一的，因为Set不保存重复元素。

                 加入Set的元素必须定义equals()方法以确保对象的唯一性。

                 Set与Collection有完全一样的接口。Set接口不保证维护元素的次序。

      (2)、HashSet : 为快速查找设计的Set。存入HashSet的对象必须定义hashCode()。

  　　(3)、TreeSet : 保存次序的Set, 底层为树结构。使用它可以从Set中提取有序的序列。

  　　(4)、LinkedHashSet : 具有HashSet的查询速度，且内部使用链表维护元素的顺序(插入的次序)。

                           于是在使用迭代器遍历Set时，结果会按元素插入的次序显示。


-----------------------------------------------------------------------


List(列表)：


　　 List的特征是其元素以线性方式存储，集合中可以存放重复对象。


　 　List接口主要实现类包括：

　　       ArrayList() : 代表长度可以改变得数组。可以对元素进行随机的访问，向ArrayList()中插入与删除元素的速度慢。

　       　LinkedList(): 在实现中采用链表数据结构。插入和删除速度快，访问速度慢。


     对于List的随机访问来说，就是只随机来检索位于特定位置的元素。

 　　List 的 get(int index) 方法放回集合中由参数index指定的索引位置的对象，下标从“0” 开始。



      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

List的功能方法

　　实际上有两种List: 

         一种是基本的ArrayList,其优点在于随机访问元素，

         另一种是更强大的LinkedList,它并不是为快速随机访问设计的，而是具有一套更通用的方法。


　 　(1)、List : 次序是List最重要的特点：它保证维护元素特定的顺序。

                 List为Collection添加了许多方法，使得能够向List中间插入与移除元素(这只推荐LinkedList使用。)

                 一个List可以生成ListIterator,使用它可以从两个方向遍历List,也可以从List中间插入和移除元素。


 　　(2)、ArrayList : 由数组实现的List。允许对元素进行快速随机访问，但是向List中间插入与移除元素的速度很慢。

                      ListIterator只应该用来由后向前遍历ArrayList,而不是用来插入和移除元素。因为那比LinkedList开销要大很多。

 　　(3)、LinkedList : 对顺序访问进行了优化，向List中间插入与删除的开销并不大。随机访问则相对较慢。(使用ArrayList代替。)

           还具有下列方法：
                           addFirst(),
 
                           addLast(),

                           getFirst(), 

                           getLast(),

                           removeFirst() 和 removeLast(),

                这些方法 (没有在任何接口或基类中定义过)使得LinkedList可以当作堆栈、队列和双向队列使用。



------------------------------------------------------------------------


最基本的两种检索集合中的所有对象的方法：

　　1: 用for循环和get()方法：

　        　for(int i=0; i<list.size();i++)

　              　System.out.println(list.get(i));

　            　}


　　2: 使用 迭代器（Iterator）:

     　　Iterator it=list.iterator();

     　　while(it.hashNext){

              　　System.out.println(it.next);

     　　}


---------------------------------------------------------------------------


Map(映射):

　　Map 是一种把键对象和值对象映射的集合，它的每一个元素都包含一对键对象和值对象。

　　Map没有继承于Collection接口

　　从Map集合中检索元素时，只要给出键对象，就会返回对应的值对象。



Map 的常用方法：


　　1 添加，删除操作：

     　　Object put(Object key, Object value): 向集合中加入元素

     　　Object remove(Object key):   删除与KEY相关的元素

     　　void putAll(Map t):   将来自特定映像的所有元素添加给该映像

     　　void clear(): 从映像中删除所有映射


    2 查询操作：

　     　Object get(Object key): 获得与关键字key相关的值

     　　Map集合中的键对象不允许重复，也就说，任意两个键对象通过equals()方法比较的结果都是false.

　     　但是可以将任意多个键独享映射到同一个值对象上。

     　　Conllections : 集合实用类

　     　Conllections提供了供JAVA集合实用的静态方法


 
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Map的功能方法：

     　　方法put(Object key, Object value)添加一个“值”(想要得东西)和与“值”相关联的“键”(key)(使用它来查找)。

         方法get(Object key)返回与给定“键”相关联的“值”。

         可以用containsKey()和containsValue()测试Map中是否包含某个“键”或“值”。

         标准的Java类库中包含了几种不同的Map：

                  HashMap, 

                  TreeMap,

                  LinkedHashMap,

                  WeakHashMap,

                  IdentityHashMap。

         它们都有同样的基本接口Map，但是行为、效率、排序策略、保存对象的生命周期和判定“键”等价的策略等各不相同。

         执行效率是Map的一个大问题。看看get()要做哪些事，就会明白为什么在ArrayList中搜索“键”是相当慢的。

         而这正是HashMap提高速度的地方。HashMap使用了特殊的值，称为“散列码”(hash code)，来取代对键的缓慢搜索。

         “散列码”是“相对唯一”用以代表对象的int值，它是通过将该对象的某些信息进行转换而生成的。

         所有Java对象都能产生散列码，因为hashCode()是定义在基类Object中的方法。

         HashMap就是使用对象的hashCode()进行快速查询的。此方法能够显着提高性能。


        (1)、Map : 维护“键值对”的关联性，使你可以通过“键”查找“值”


        (2)、HashMap : Map基于散列表的实现。插入和查询“键值对”的开销是固定的。

                       可以通过构造器设置容量capacity和负载因子load factor，以调整容器的性能。


        (3)、LinkedHashMap : 类似于HashMap，但是迭代遍历它时，取得“键值对”的顺序是其插入次序，或者是最近最少使用(LRU)的次序。

                             只比HashMap慢一点。而在迭代访问时发而更快，因为它使用链表维护内部次序。


        (4)、TreeMap : 基于红黑树数据结构的实现。查看“键”或“键值对”时，它们会被排序(次序由Comparabel或Comparator决定)。

                       TreeMap的特点在于，你得到的结果是经过排序的。

                       TreeMap是唯一的带有subMap()方法的Map，它可以返回一个子树。


        (5)、akHashMao : 弱键(weak key)Map，Map中使用的对象也被允许释放: 这是为解决特殊问题设计的。

                         如果没有map之外的引用指向某个“键”，则此“键”可以被垃圾收集器回收。


        (6)、IdentifyHashMap : 使用==代替equals()对“键”作比较的hash map。专为解决特殊问题而设计。

--------------------------------------------------------------------------------------------------------------------------------------


     map是个接口

     用都是用HasMap等实现Map接口的类

     创建：Map<String,String> map = new HashMap<String,String>();

     插入元素：map.put("1","a"); 

     移除元素: map.remove("1");

     清空: map.clear();


---------------------------------------------------------


        HashMap hashmap = new HashMap();  

        hashmap.put("Item0","Value0");
  
        hashmap.put("Item1","Value1");
  
        hashmap.put("Item2","Value2");
  
        hashmap.put("Item3","Value3"); 


------------------------------------------------------


    java中map集合类用法（hashmap用法） 

       map键值对，值一般存储的是对象。hashmap中常用的方法，put(object key,object value);

       get(object key);//根据key值找出对应的value值。

       判断键是否存在：containsKey(object key)

       判断值是否存在：containsValue(object value)


---------------------------------------------------------------

Map:
     
   1、Map的特性即「键-值」（Key-Value）匹配

         java.util.HashMap实作了Map界面，

         HashMap在内部实作使用哈希（Hash），很快的时间内可以寻得「键-值」匹配.


             Map<String, String> map =
                                   new HashMap<String, String>();

             String key1 = "caterpillar";

             String key2 = "justin";

             map.put(key1, "caterpillar的讯息");

             map.put(key2, "justin的讯息");
        
             System.out.println(map.get(key1));

             System.out.println(map.get(key2));


--------------------------------------------------------------------------


   2、可以使用 values() 方法返回一个实作Collection的对象，当中包括所有的「值」对象

                 Map<String, String> map =
                                 new HashMap<String, String>();
 
                    map.put("justin", "justin的讯息");
 
                    map.put("momor", "momor的讯息");
 
                    map.put("caterpillar", "caterpillar的讯息");
        
                    Collection collection = map.values();
 
                    Iterator iterator = collection.iterator();
 
                    while(iterator.hasNext()) {
 
                           System.out.println(iterator.next());
 
                     }
 
                    System.out.println();


 ---------------------------------------------------


   3、Map<String, String> map =
                     new LinkedHashMap<String, String>();
        
          map.put("justin", "justin的讯息");

          map.put("momor", "momor的讯息");

          map.put("caterpillar", "caterpillar的讯息");
        
          for(String value : map.values()) {

              System.out.println(value);
          }


--------------------------------------------------------------------------------------


java map 遍历的三种简单的办法:


import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.Map.Entry;


/**
 * map遍历的三种办法
 * @author us
 *
 */
public class test2
{
   public static void main(String[] args)
    {    
       /**
        * new一个map，然后添加内容
        */
       Map map=new HashMap();
       for (int i = 0; i < 10; i++)
        {
            map.put(i+"",i+"");
            System.out.println("添加"+i+"成功");
        }
       System.out.println("map大小"+map.size());
  
 

       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~    
       /**
        * 1.把值放到一个集合力，然后便利集合
        */
//       Collection c=map.values();
//       Iterator it= c.iterator();
//       for (; it.hasNext();)
//        {
//            System.out.println(it.next());
//        }
       


       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~```
       /**
        * 2.把key放到一个集合里，遍历key值同时根据key得到值 (推荐)
        */
//       Set set =map.keySet();
//       Iterator it=set.iterator();
//       while(it.hasNext()){
//           String s= (String) it.next();
//           System.out.println(map.get(s));
//       }
//    


       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~   
       /**
        * 3.把一个map对象放到放到entry里，然后根据entry同时得到key和值
        */
       Set set =map.entrySet();
       Iterator it=set.iterator();
       while(it.hasNext()){
           Map.Entry<String, String>  entry=(Entry<String, String>) it.next();
           System.out.println(entry.getKey()+":"+entry.getValue());
           
       }




















































