

http://www.runoob.com/git/git-workspace-index-repo.html

$ git reflog ：取消合并  git reset --hard 7055e

pull时候选stash就是保留本地改动的文件，选discard就是覆盖

---------------------------------------------

一、Git安装配置：

1、用户信息
    配置个人的用户名称和电子邮件地址：
          $ git config --global user.name "runoob"
          $ git config --global user.email test@runoob.com
  
    注意：
         如果用了 --global 选项，那么更改的配置文件就是位于你用户主目录下的那个，以后你所有的项目都会默认使用这里配置的用户信息。

         如果要在某个特定的项目中使用其他名字或者电邮，只要去掉 --global 选项重新配置即可，新的设定保存在当前项目的 .git/config 文件里


2、文本编辑器
      
     设置Git默认使用的文本编辑器, 一般可能会是 Vi 或者 Vim。如果你有其他偏好，比如 Emacs 的话，可以重新设置：:
                             
        $ git config --global core.editor emacs


3、差异分析工具

      还有一个比较常用的是，在解决合并冲突时使用哪种差异分析工具。比如要改用 vimdiff 的话：

             $ git config --global merge.tool vimdiff

             Git 可以理解 kdiff3，tkdiff，meld，xxdiff，emerge，vimdiff，gvimdiff，ecmerge，和 opendiff 等合并工具的输出信息


4、查看配置信息

     要检查已有的配置信息，可以使用 git config --list 命令：

               $ git config --list

               http.postbuffer=2M

               user.name=runoob

               user.email=test@runoob.com

     也可以直接查阅某个环境变量的设定，只要把特定的名字跟在后面即可，像这样：

               $ git config user.name
               
               runoob


-------------------------------------------------------------


二、Git 工作流程（可看图）

      一般工作流程如下：

              克隆 Git 资源作为工作目录。

              在克隆的资源上添加或修改文件。

              如果其他人修改了，你可以更新资源。

              在提交前查看修改。

              提交修改。

              在修改完成后，如果发现错误，可以撤回提交并再次修改并提交。


-------------------------------------------------------------


三、Git 工作区、暂存区和版本库（可看图）

      基本概念

        我们先来理解下Git 工作区、暂存区和版本库概念

         工作区：就是你在电脑里能看到的目录。

         暂存区：英文叫stage, 或index。一般存放在 ".git目录下" 下的index文件（.git/index）中，所以我们把暂存区有时也叫作索引（index）。

         版本库：工作区有一个隐藏目录.git，这个不算工作区，而是Git的版本库。

        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

      （在git文件夹中观察图）：

        1、图中左侧为工作区，右侧为版本库。在版本库中标记为 "index" 的区域是暂存区（stage, index），标记为 "master" 的是 master 分支所代表的目录树。

        2、图中我们可以看出此时 "HEAD" 实际是指向 master 分支的一个"游标"。所以图示的命令中出现 HEAD 的地方可以用 master 来替换。

        3、图中的 objects 标识的区域为 Git 的对象库，实际位于 ".git/objects" 目录下，里面包含了创建的各种对象及内容。

        4、当对工作区修改（或新增）的文件执行 "git add" 命令时，暂存区的目录树被更新，同时工作区修改（或新增）的文件内容被写入到对象库中的一个新的对象中，而该对象的ID被记录在暂存区的文件索引中。

        5、当执行提交操作（git commit）时，暂存区的目录树写到版本库（对象库）中，master 分支会做相应的更新。即 master 指向的目录树就是提交时暂存区的目录树

        6、当执行 "git reset HEAD" 命令时，暂存区的目录树会被重写，被 master 分支指向的目录树所替换，但是工作区不受影响。

        7、当执行 "git rm --cached <file>" 命令时，会直接从暂存区删除文件，工作区则不做出改变。

        8、当执行 "git checkout ." 或者 "git checkout -- <file>" 命令时，会用暂存区全部或指定的文件替换工作区的文件。这个操作很危险，会清除工作区中未添加到暂存区的改动。

        9、当执行 "git checkout HEAD ." 或者 "git checkout HEAD <file>" 命令时，会用 HEAD 指向的 master 分支中的全部或者部分文件替换暂存区和以及工作区中的文件。这个命令也是极具危险性的，因为不但会清除工作区中未提交的改动，也会清除暂存区中未提交的改动。


       
----------------------------------------------------------------------------------


四、Git 创建仓库

     本章节我们将为大家介绍如何创建一个 Git 仓库。

     你可以使用一个已经存在的目录作为Git仓库。


 1、git init
 
      Git 使用 git init 命令来初始化一个 Git 仓库，Git 的很多命令都需要在 Git 的仓库中运行，所以 git init 是使用 Git 的第一个命令。

      在执行完成 git init 命令后，Git 仓库会生成一个 .git 目录，该目录包含了资源的所有元数据，其他的项目目录保持不变（不像 SVN 会在每个
      子目录生成 .svn 目录，Git 只在仓库的根目录生成 .git 目录）。


 
 2、使用方法

       使用当前目录作为Git仓库，我们只需使它初始化。

                            git init

       该命令执行完后会在当前目录生成一个 .git 目录。

       使用我们指定目录作为Git仓库。

                            git init newrepo

         初始化后，会在 newrepo 目录下会出现一个名为 .git 的目录，所有 Git 需要的数据和资源都存放在这个目录中。


         如果当前目录下有几个文件想要纳入版本控制，需要先用 git add 命令告诉 Git 开始对这些文件进行跟踪，然后提交：

                   $ git add *.c

                   $ git add README

                   $ git commit -m '初始化项目版本'

               以上命令将目录下以 .c 结尾及 README 文件提交到仓库中。



  3、git clone

      我们使用 git clone 从现有 Git 仓库中拷贝项目（类似 svn checkout）。

      克隆仓库的命令格式为：

             git clone <repo>

      如果我们需要克隆到指定的目录，可以使用以下命令格式：

             git clone <repo> <directory>


      参数说明：

        repo:Git 仓库。

        directory:本地目录。

        比如，要克隆 Ruby 语言的 Git 代码仓库 Grit，可以用下面的命令：

                          $ git clone git://github.com/schacon/grit.git

          执行该命令后，会在当前目录下创建一个名为grit的目录，其中包含一个 .git 的目录，用于保存下载下来的所有版本记录。

          如果要自己定义要新建的项目目录名称，可以在上面的命令末尾指定新的名字：

                         $ git clone git://github.com/schacon/grit.git mygrit



   4、Git 基本操作
  
       Git 的工作就是创建和保存你项目的快照及与之后的快照进行对比。本章将对有关创建与提交你的项目快照的命令作介绍。

       
      获取与创建项目命令

        （1）git init

          用 git init 在目录中创建新的 Git 仓库。 你可以在任何时候、任何目录中这么做，完全是本地化的。

          在目录中执行 git init，就可以创建一个 Git 仓库了。比如我们创建 runoob 项目：

                         $ mkdir runoob

                         $ cd runoob/

                         $ git init

                         Initialized empty Git repository in /Users/tianqixin/www/runoob/.git/

                         # 在 /www/runoob/.git/ 目录初始化空 Git 仓库完毕。

           现在你可以看到在你的项目中生成了 .git 这个子目录。 这就是你的 Git 仓库了，所有有关你的此项目的快照数据都存放在这里。


        （2）git clone

               使用 git clone 拷贝一个 Git 仓库到本地，让自己能够查看该项目，或者进行修改。

               如果你需要与他人合作一个项目，或者想要复制一个项目，看看代码，你就可以克隆那个项目。 执行命令：
 
                                   git clone [url]

                       [url] 为你想要复制的项目，就可以了。


             例如我们克隆 Github 上的项目：

                 $ git clone git@github.com:schacon/simplegit.git

                      Cloning into 'simplegit'...
                      remote: Counting objects: 13, done.
                      remote: Total 13 (delta 0), reused 0 (delta 0), pack-reused 13
                      Receiving objects: 100% (13/13), done.
                      Resolving deltas: 100% (2/2), done.
                      Checking connectivity... done.

                 克隆完成后，在当前目录下会生成一个 simplegit 目录：
                 
                               $ cd simplegit/ $ ls README Rakefile lib

                 上述操作将复制该项目的全部记录。

                 默认情况下，Git 会按照你提供的 URL 所指示的项目的名称创建你的本地项目目录。

                 通常就是该 URL 最后一个 / 之后的项目名称。如果你想要一个不一样的名字， 你可以在该命令后加上你想要的名称。



   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


    基本快照

       Git 的工作就是创建和保存你的项目的快照及与之后的快照进行对比。

       本章将对有关创建与提交你的项目的快照的命令作介绍。


     (1)git add

         git add 命令可将该文件添加到缓存，如我们添加以下两个文件：

              $ touch README
              $ touch hello.php
              $ ls
              README		hello.php
              $ git status -s
              ?? README
              ?? hello.php
              $ 


      git status  命令用于查看项目的当前状态。

          接下来我们执行 git add 命令来添加文件：

                   $ git add README hello.php 

          现在我们再执行 git status，就可以看到这两个文件已经加上去了。

                        $ git status -s
                        A  README
                        A  hello.php
                        $ 

          新项目中，添加所有文件很普遍，我们可以使用 git add . 命令来添加当前项目的所有文件。

          现在我们修改 README 文件：

                        $ vim README

            在 README 添加以下内容：# Runoob Git 测试，然后保存退出。


          再执行一下 git status：

                       $ git status -s
                       AM README 
                       A  hello.php


            "AM" 状态的意思是，这个文件在我们将它添加到缓存之后又有改动。改动后我们在执行 git add 命令将其添加到缓存中：

                     $ git add .
                     $ git status -s
                     A  README
                     A  hello.php
      
                  当你要将你的修改包含在即将提交的快照里的时候，需要执行 git add。


      (2)git status

           git status 以查看在你上次提交之后是否有修改。

           我演示该命令的时候加了 -s 参数，以获得简短的结果输出。如果没加该参数会详细输出内容：


















































































